
REGISTER_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000484  08000484  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000484  08000484  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000484  08000484  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000484  08000484  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000484  08000484  00001484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000488  08000488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800048c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001588  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a1  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00003b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000153  00000000  00000000  00003d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e6db  00000000  00000000  00003e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021fb  00000000  00000000  0002256e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbc11  00000000  00000000  00024769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e037a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005a4  00000000  00000000  000e03c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  000e0964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800046c 	.word	0x0800046c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800046c 	.word	0x0800046c

080001c8 <RCC_Config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RCC_Config(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00010000; //HSEON enable
 80001cc:	4b27      	ldr	r3, [pc, #156]	@ (800026c <RCC_Config+0xa4>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a26      	ldr	r2, [pc, #152]	@ (800026c <RCC_Config+0xa4>)
 80001d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001d6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x00020000)); //HSEON Ready Flag wait
 80001d8:	bf00      	nop
 80001da:	4b24      	ldr	r3, [pc, #144]	@ (800026c <RCC_Config+0xa4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0f9      	beq.n	80001da <RCC_Config+0x12>
	RCC->CR |= 0x00080000; // CSS Enable
 80001e6:	4b21      	ldr	r3, [pc, #132]	@ (800026c <RCC_Config+0xa4>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a20      	ldr	r2, [pc, #128]	@ (800026c <RCC_Config+0xa4>)
 80001ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001f0:	6013      	str	r3, [r2, #0]
	RCC->CR |= 0x01000000; //PLL ON
 80001f2:	4b1e      	ldr	r3, [pc, #120]	@ (800026c <RCC_Config+0xa4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a1d      	ldr	r2, [pc, #116]	@ (800026c <RCC_Config+0xa4>)
 80001f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001fc:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000;// PLL e HSE
 80001fe:	4b1b      	ldr	r3, [pc, #108]	@ (800026c <RCC_Config+0xa4>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	4a1a      	ldr	r2, [pc, #104]	@ (800026c <RCC_Config+0xa4>)
 8000204:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000208:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004;// PLL M = 4
 800020a:	4b18      	ldr	r3, [pc, #96]	@ (800026c <RCC_Config+0xa4>)
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	4a17      	ldr	r2, [pc, #92]	@ (800026c <RCC_Config+0xa4>)
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00;// PLL N = 168
 8000216:	4b15      	ldr	r3, [pc, #84]	@ (800026c <RCC_Config+0xa4>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4a14      	ldr	r2, [pc, #80]	@ (800026c <RCC_Config+0xa4>)
 800021c:	f443 43b4 	orr.w	r3, r3, #23040	@ 0x5a00
 8000220:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000000;// PLL P = 2
 8000222:	4b12      	ldr	r3, [pc, #72]	@ (800026c <RCC_Config+0xa4>)
 8000224:	4a11      	ldr	r2, [pc, #68]	@ (800026c <RCC_Config+0xa4>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	6053      	str	r3, [r2, #4]
	RCC->CFGR |=0x00000000; //AHB Prescaler = 1
 800022a:	4b10      	ldr	r3, [pc, #64]	@ (800026c <RCC_Config+0xa4>)
 800022c:	4a0f      	ldr	r2, [pc, #60]	@ (800026c <RCC_Config+0xa4>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=0x00080000; //APB2 Prescaler = 2
 8000232:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <RCC_Config+0xa4>)
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <RCC_Config+0xa4>)
 8000238:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800023c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=0x00001400; //APB1 Prescaler = 4
 800023e:	4b0b      	ldr	r3, [pc, #44]	@ (800026c <RCC_Config+0xa4>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	4a0a      	ldr	r2, [pc, #40]	@ (800026c <RCC_Config+0xa4>)
 8000244:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000248:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00080000; //HSERDY Flag clear
 800024a:	4b08      	ldr	r3, [pc, #32]	@ (800026c <RCC_Config+0xa4>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	4a07      	ldr	r2, [pc, #28]	@ (800026c <RCC_Config+0xa4>)
 8000250:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000254:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000; // CSS Flag clear
 8000256:	4b05      	ldr	r3, [pc, #20]	@ (800026c <RCC_Config+0xa4>)
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	4a04      	ldr	r2, [pc, #16]	@ (800026c <RCC_Config+0xa4>)
 800025c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000260:	60d3      	str	r3, [r2, #12]
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	40023800 	.word	0x40023800

08000270 <TIM_Config>:

void TIM_Config(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	// Time2 clock enable
	RCC->APB1ENR  |= 1<<0; // same : RCC->APB1ENR  |= 0x00000001;
 8000274:	4b22      	ldr	r3, [pc, #136]	@ (8000300 <TIM_Config+0x90>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000278:	4a21      	ldr	r2, [pc, #132]	@ (8000300 <TIM_Config+0x90>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6413      	str	r3, [r2, #64]	@ 0x40

	//TIMx control register 1 (TIMx_CR1)
	TIM2->CR1 |= 1<<0; //CEN Timer2 Counter Enable
 8000280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(1<<4); //Bit 4 DIR Direction // Upcounter here
 8000290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029a:	f023 0310 	bic.w	r3, r3, #16
 800029e:	6013      	str	r3, [r2, #0]
						//   0: Counter used as upcounter
						// 	 1: Counter used as downcounter

	//Bits 6:5 CMS Center-aligned mode selection
		//00 Edge-aligned mode. The Counter countes up or down depending on the direction bit (DIR)
	TIM2->CR1 &= ~( 1<<5 || 1<<6 );
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002aa:	f023 0301 	bic.w	r3, r3, #1
 80002ae:	6013      	str	r3, [r2, #0]

	//Bits 9:8  CKD : Clock Division
				// 00 tDTS = tCK_INT  // directly timer clock
				// 01 tDTS = 2 x tCK_INT // timer clock twice
				//...
	TIM2->CR1 &= ~(1<<9 || 1<<8); // Directly timer clock
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ba:	f023 0301 	bic.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]

	// TIMx slave mode control register  TIMx_SMCR

	// Bits 2:0 SMS Slave Mode Selection
			//  000: Slave mode disabled - if CEN = ‘1 then the prescaler is clocked directly by the internal clock.
	TIM2->SMCR &= ~(1<<0 || 1<<1 || 1<<2 );
 80002c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ca:	f023 0301 	bic.w	r3, r3, #1
 80002ce:	6093      	str	r3, [r2, #8]


	TIM2->EGR |= 1<<0; // Timer update generation // Especially after some configuration such as prescaler or auto-reload
 80002d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6153      	str	r3, [r2, #20]
 The counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1).
 PSC contains the value to be loaded in the active prescaler register at each update event
(including when the counter is cleared through UG bit of TIMx_EGR register or through
trigger controller when configured in “reset mode”).
	 */
	TIM2->PSC = 41999; // We set prescaler value = 41999
 80002e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e4:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80002e8:	629a      	str	r2, [r3, #40]	@ 0x28
 ARR is the value to be loaded in the actual auto-reload register.
 Refer to the Section18.3.1: Time-base unit for more details about ARR update and
behavior.
 The counter is blocked while the auto-reload value is null.
	 */
	TIM2->ARR =2000;
 80002ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ee:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80002f2:	62da      	str	r2, [r3, #44]	@ 0x2c

	//1 second = (TIM->PSC + 1) * (TIM2->ARR + 1)  /  TIME CLOCK
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40023800 	.word	0x40023800

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */

	RCC_Config();
 8000308:	f7ff ff5e 	bl	80001c8 <RCC_Config>
	TIM_Config();
 800030c:	f7ff ffb0 	bl	8000270 <TIM_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count = TIM2->CNT;
 8000310:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000316:	b21a      	sxth	r2, r3
 8000318:	4b01      	ldr	r3, [pc, #4]	@ (8000320 <main+0x1c>)
 800031a:	801a      	strh	r2, [r3, #0]
 800031c:	e7f8      	b.n	8000310 <main+0xc>
 800031e:	bf00      	nop
 8000320:	20000020 	.word	0x20000020

08000324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <NMI_Handler+0x4>

0800032c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <HardFault_Handler+0x4>

08000334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <MemManage_Handler+0x4>

0800033c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <BusFault_Handler+0x4>

08000344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <UsageFault_Handler+0x4>

0800034c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037a:	f000 f83f 	bl	80003fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
	...

08000384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <SystemInit+0x20>)
 800038a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038e:	4a05      	ldr	r2, [pc, #20]	@ (80003a4 <SystemInit+0x20>)
 8000390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80003a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003ac:	f7ff ffea 	bl	8000384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003b0:	480c      	ldr	r0, [pc, #48]	@ (80003e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003b2:	490d      	ldr	r1, [pc, #52]	@ (80003e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003b4:	4a0d      	ldr	r2, [pc, #52]	@ (80003ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	@ (80003f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003c8:	4c0a      	ldr	r4, [pc, #40]	@ (80003f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003d6:	f000 f825 	bl	8000424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003da:	f7ff ff93 	bl	8000304 <main>
  bx  lr    
 80003de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80003e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003ec:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 80003f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003f4:	20000028 	.word	0x20000028

080003f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC_IRQHandler>
	...

080003fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <HAL_IncTick+0x20>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	461a      	mov	r2, r3
 8000406:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <HAL_IncTick+0x24>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4413      	add	r3, r2
 800040c:	4a04      	ldr	r2, [pc, #16]	@ (8000420 <HAL_IncTick+0x24>)
 800040e:	6013      	str	r3, [r2, #0]
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000000 	.word	0x20000000
 8000420:	20000024 	.word	0x20000024

08000424 <__libc_init_array>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	4d0d      	ldr	r5, [pc, #52]	@ (800045c <__libc_init_array+0x38>)
 8000428:	4c0d      	ldr	r4, [pc, #52]	@ (8000460 <__libc_init_array+0x3c>)
 800042a:	1b64      	subs	r4, r4, r5
 800042c:	10a4      	asrs	r4, r4, #2
 800042e:	2600      	movs	r6, #0
 8000430:	42a6      	cmp	r6, r4
 8000432:	d109      	bne.n	8000448 <__libc_init_array+0x24>
 8000434:	4d0b      	ldr	r5, [pc, #44]	@ (8000464 <__libc_init_array+0x40>)
 8000436:	4c0c      	ldr	r4, [pc, #48]	@ (8000468 <__libc_init_array+0x44>)
 8000438:	f000 f818 	bl	800046c <_init>
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	2600      	movs	r6, #0
 8000442:	42a6      	cmp	r6, r4
 8000444:	d105      	bne.n	8000452 <__libc_init_array+0x2e>
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	f855 3b04 	ldr.w	r3, [r5], #4
 800044c:	4798      	blx	r3
 800044e:	3601      	adds	r6, #1
 8000450:	e7ee      	b.n	8000430 <__libc_init_array+0xc>
 8000452:	f855 3b04 	ldr.w	r3, [r5], #4
 8000456:	4798      	blx	r3
 8000458:	3601      	adds	r6, #1
 800045a:	e7f2      	b.n	8000442 <__libc_init_array+0x1e>
 800045c:	08000484 	.word	0x08000484
 8000460:	08000484 	.word	0x08000484
 8000464:	08000484 	.word	0x08000484
 8000468:	08000488 	.word	0x08000488

0800046c <_init>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

08000478 <_fini>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr
