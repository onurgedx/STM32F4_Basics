
REGISTER_EXTERNAL_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000440  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c8  080005c8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c8  080005c8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080005c8  080005c8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c8  080005c8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c8  080005c8  000015c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005cc  080005cc  000015cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005d0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001bfe  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000645  00000000  00000000  00003c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00004278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000017c  00000000  00000000  00004490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e6db  00000000  00000000  0000460c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000232c  00000000  00000000  00022ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbcfa  00000000  00000000  00025013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e0d0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000068c  00000000  00000000  000e0d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  000e13dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005b0 	.word	0x080005b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080005b0 	.word	0x080005b0

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	@ (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <CLK_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void CLK_Config()
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00030000; // HSEON and HSEONRDY enable
 800025c:	4b25      	ldr	r3, [pc, #148]	@ (80002f4 <CLK_Config+0x9c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a24      	ldr	r2, [pc, #144]	@ (80002f4 <CLK_Config+0x9c>)
 8000262:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000266:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR &0x00020000)); // HSEON  Ready Flag wait
 8000268:	bf00      	nop
 800026a:	4b22      	ldr	r3, [pc, #136]	@ (80002f4 <CLK_Config+0x9c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f9      	beq.n	800026a <CLK_Config+0x12>
	RCC->CR |= 0x00080000; // CSS Enable
 8000276:	4b1f      	ldr	r3, [pc, #124]	@ (80002f4 <CLK_Config+0x9c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a1e      	ldr	r2, [pc, #120]	@ (80002f4 <CLK_Config+0x9c>)
 800027c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000280:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000; // PLL => HSE
 8000282:	4b1c      	ldr	r3, [pc, #112]	@ (80002f4 <CLK_Config+0x9c>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	4a1b      	ldr	r2, [pc, #108]	@ (80002f4 <CLK_Config+0x9c>)
 8000288:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800028c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004; // PLL M =4;
 800028e:	4b19      	ldr	r3, [pc, #100]	@ (80002f4 <CLK_Config+0x9c>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	4a18      	ldr	r2, [pc, #96]	@ (80002f4 <CLK_Config+0x9c>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00; // PLL N =168;
 800029a:	4b16      	ldr	r3, [pc, #88]	@ (80002f4 <CLK_Config+0x9c>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	4a15      	ldr	r2, [pc, #84]	@ (80002f4 <CLK_Config+0x9c>)
 80002a0:	f443 43b4 	orr.w	r3, r3, #23040	@ 0x5a00
 80002a4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004; // PLL P =2;
 80002a6:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <CLK_Config+0x9c>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	4a12      	ldr	r2, [pc, #72]	@ (80002f4 <CLK_Config+0x9c>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x00000000; // AHB Prescaler = 1;
 80002b2:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <CLK_Config+0x9c>)
 80002b4:	4a0f      	ldr	r2, [pc, #60]	@ (80002f4 <CLK_Config+0x9c>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00080000; // APB2 Prescaler = 2;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <CLK_Config+0x9c>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <CLK_Config+0x9c>)
 80002c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002c4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00001400; // APB1 Prescaler = 4
 80002c6:	4b0b      	ldr	r3, [pc, #44]	@ (80002f4 <CLK_Config+0x9c>)
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	4a0a      	ldr	r2, [pc, #40]	@ (80002f4 <CLK_Config+0x9c>)
 80002cc:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80002d0:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x0008000;  //HSERDY Flag clear;
 80002d2:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <CLK_Config+0x9c>)
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	4a07      	ldr	r2, [pc, #28]	@ (80002f4 <CLK_Config+0x9c>)
 80002d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002dc:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000;  //CSS flag clear;
 80002de:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <CLK_Config+0x9c>)
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	4a04      	ldr	r2, [pc, #16]	@ (80002f4 <CLK_Config+0x9c>)
 80002e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80002e8:	60d3      	str	r3, [r2, #12]


}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40023800 	.word	0x40023800

080002f8 <GPIO_Config>:

void GPIO_Config()
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR = 0x00000009; // GPIOA and GPIOD are ACTIVATED
 80002fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <GPIO_Config+0x30>)
 80002fe:	2209      	movs	r2, #9
 8000300:	631a      	str	r2, [r3, #48]	@ 0x30
	GPIOD->MODER = 0x55000000; // GPIOD pin12..15 output
 8000302:	4b0a      	ldr	r3, [pc, #40]	@ (800032c <GPIO_Config+0x34>)
 8000304:	f04f 42aa 	mov.w	r2, #1426063360	@ 0x55000000
 8000308:	601a      	str	r2, [r3, #0]
	GPIOD->OTYPER = 0x00000000;
 800030a:	4b08      	ldr	r3, [pc, #32]	@ (800032c <GPIO_Config+0x34>)
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
	GPIOD->OSPEEDR = 0xFF000000; //
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <GPIO_Config+0x34>)
 8000312:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8000316:	609a      	str	r2, [r3, #8]
	GPIOD->PUPDR = 0x00000000;
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <GPIO_Config+0x34>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40023800 	.word	0x40023800
 800032c:	40020c00 	.word	0x40020c00

08000330 <EXTI_Config>:

void EXTI_Config()
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	RCC->APB2ENR =0x00004000; // SYSCFG is activated (exti)
 8000334:	4b11      	ldr	r3, [pc, #68]	@ (800037c <EXTI_Config+0x4c>)
 8000336:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800033a:	645a      	str	r2, [r3, #68]	@ 0x44

	SYSCFG->EXTICR[0] = 0x00000000; // EXTI0 EXTI1 EXTI2 EXTI3. which port are they use
 800033c:	4b10      	ldr	r3, [pc, #64]	@ (8000380 <EXTI_Config+0x50>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
									// 0000 : PA[x] pin
									//  0000 : PA[x]  burdaki x yaptik
									// x  degerine göre hangi external iterrupt ları kastediyor onu anlıyoruz

	//nvics are activated for interrupts
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000342:	2006      	movs	r0, #6
 8000344:	f7ff ff40 	bl	80001c8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1_IRQn);
 8000348:	2007      	movs	r0, #7
 800034a:	f7ff ff3d 	bl	80001c8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 800034e:	2008      	movs	r0, #8
 8000350:	f7ff ff3a 	bl	80001c8 <__NVIC_EnableIRQ>


	NVIC_SetPriority(EXTI0_IRQn,0);
 8000354:	2100      	movs	r1, #0
 8000356:	2006      	movs	r0, #6
 8000358:	f7ff ff54 	bl	8000204 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI1_IRQn,1);
 800035c:	2101      	movs	r1, #1
 800035e:	2007      	movs	r0, #7
 8000360:	f7ff ff50 	bl	8000204 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI2_IRQn,2);
 8000364:	2102      	movs	r1, #2
 8000366:	2008      	movs	r0, #8
 8000368:	f7ff ff4c 	bl	8000204 <__NVIC_SetPriority>
		// 0 interrupt is masked  // used as event
		// 1 interrupt is not masked 	// used as interrupt
	// interrupt olarak mı kullanacaksın
	// event olarak mı ?
	// biz interrupt olarak kullanacagız o yüzden 1 yapacagız not masked
	EXTI->IMR = 0x00000007; // PA0 PA1 PA2 are activated for interrpurt
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <EXTI_Config+0x54>)
 800036e:	2207      	movs	r2, #7
 8000370:	601a      	str	r2, [r3, #0]

	// rising trigger selection register // yükselen kenar mı alçalan kenar mı istiyoruz ona göre interruptları firelicak
	// 12.3.3 Rising trigger selection register ( EXTI_RTSR)
	// 0 rising trigger disabled
	// 1 rising trigger enabled
	EXTI->RTSR = 0x00000007;
 8000372:	4b04      	ldr	r3, [pc, #16]	@ (8000384 <EXTI_Config+0x54>)
 8000374:	2207      	movs	r2, #7
 8000376:	609a      	str	r2, [r3, #8]

}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40023800 	.word	0x40023800
 8000380:	40013800 	.word	0x40013800
 8000384:	40013c00 	.word	0x40013c00

08000388 <delay>:

void delay(uint32_t time)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	while(time--);
 8000390:	bf00      	nop
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	1e5a      	subs	r2, r3, #1
 8000396:	607a      	str	r2, [r7, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d1fa      	bne.n	8000392 <delay+0xa>
}
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
	...

080003ac <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

	// 12.3.6 Pending register (EXTI_PR)
		// kesme yapıldı mı gerçekten onun kontrolü

	if(EXTI->PR&0x00000001)// eger 0. pini 1 ise iceri gir
 80003b0:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <EXTI0_IRQHandler+0x28>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0301 	and.w	r3, r3, #1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d009      	beq.n	80003d0 <EXTI0_IRQHandler+0x24>
	{
		GPIOD->ODR = 0x00001000;
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <EXTI0_IRQHandler+0x2c>)
 80003be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003c2:	615a      	str	r2, [r3, #20]
		delay(33600000);
 80003c4:	4805      	ldr	r0, [pc, #20]	@ (80003dc <EXTI0_IRQHandler+0x30>)
 80003c6:	f7ff ffdf 	bl	8000388 <delay>
		EXTI->PR = 0x00000001;
 80003ca:	4b02      	ldr	r3, [pc, #8]	@ (80003d4 <EXTI0_IRQHandler+0x28>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	615a      	str	r2, [r3, #20]
	}
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40013c00 	.word	0x40013c00
 80003d8:	40020c00 	.word	0x40020c00
 80003dc:	0200b200 	.word	0x0200b200

080003e0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

	// 12.3.6 Pending register (EXTI_PR)
		// kesme yapıldı mı gerçekten onun kontrolü

	if(EXTI->PR&0x00000002)// eger 0. pini 1 ise iceri gir
 80003e4:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <EXTI1_IRQHandler+0x28>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	f003 0302 	and.w	r3, r3, #2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <EXTI1_IRQHandler+0x24>
	{
		GPIOD->ODR = 0x00002000;
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <EXTI1_IRQHandler+0x2c>)
 80003f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003f6:	615a      	str	r2, [r3, #20]
		delay(33600000);
 80003f8:	4805      	ldr	r0, [pc, #20]	@ (8000410 <EXTI1_IRQHandler+0x30>)
 80003fa:	f7ff ffc5 	bl	8000388 <delay>
		EXTI->PR = 0x00000002;
 80003fe:	4b02      	ldr	r3, [pc, #8]	@ (8000408 <EXTI1_IRQHandler+0x28>)
 8000400:	2202      	movs	r2, #2
 8000402:	615a      	str	r2, [r3, #20]
	}
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40013c00 	.word	0x40013c00
 800040c:	40020c00 	.word	0x40020c00
 8000410:	0200b200 	.word	0x0200b200

08000414 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

	// 12.3.6 Pending register (EXTI_PR)
		// kesme yapıldı mı gerçekten onun kontrolü

	if(EXTI->PR&0x00000004)// eger 0. pini 1 ise iceri gir
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <EXTI2_IRQHandler+0x28>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	2b00      	cmp	r3, #0
 8000422:	d009      	beq.n	8000438 <EXTI2_IRQHandler+0x24>
	{
		GPIOD->ODR = 0x00004000;
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <EXTI2_IRQHandler+0x2c>)
 8000426:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800042a:	615a      	str	r2, [r3, #20]
		delay(33600000);
 800042c:	4805      	ldr	r0, [pc, #20]	@ (8000444 <EXTI2_IRQHandler+0x30>)
 800042e:	f7ff ffab 	bl	8000388 <delay>
		EXTI->PR = 0x00000004;
 8000432:	4b02      	ldr	r3, [pc, #8]	@ (800043c <EXTI2_IRQHandler+0x28>)
 8000434:	2204      	movs	r2, #4
 8000436:	615a      	str	r2, [r3, #20]
	}
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40013c00 	.word	0x40013c00
 8000440:	40020c00 	.word	0x40020c00
 8000444:	0200b200 	.word	0x0200b200

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  CLK_Config();
 800044c:	f7ff ff04 	bl	8000258 <CLK_Config>
  GPIO_Config();
 8000450:	f7ff ff52 	bl	80002f8 <GPIO_Config>
  EXTI_Config();
 8000454:	f7ff ff6c 	bl	8000330 <EXTI_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 GPIOD->ODR = 0x0000F000;
 8000458:	4b02      	ldr	r3, [pc, #8]	@ (8000464 <main+0x1c>)
 800045a:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 800045e:	615a      	str	r2, [r3, #20]
 8000460:	e7fa      	b.n	8000458 <main+0x10>
 8000462:	bf00      	nop
 8000464:	40020c00 	.word	0x40020c00

08000468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <NMI_Handler+0x4>

08000470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <HardFault_Handler+0x4>

08000478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <MemManage_Handler+0x4>

08000480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <BusFault_Handler+0x4>

08000488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <UsageFault_Handler+0x4>

08000490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004be:	f000 f83f 	bl	8000540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <SystemInit+0x20>)
 80004ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <SystemInit+0x20>)
 80004d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000524 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004f0:	f7ff ffea 	bl	80004c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	@ (8000528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	@ (800052c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	@ (8000534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	@ (8000538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800051a:	f000 f825 	bl	8000568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800051e:	f7ff ff93 	bl	8000448 <main>
  bx  lr    
 8000522:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000530:	080005d0 	.word	0x080005d0
  ldr r2, =_sbss
 8000534:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000538:	20000024 	.word	0x20000024

0800053c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC_IRQHandler>
	...

08000540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <HAL_IncTick+0x20>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <HAL_IncTick+0x24>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4413      	add	r3, r2
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <HAL_IncTick+0x24>)
 8000552:	6013      	str	r3, [r2, #0]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000000 	.word	0x20000000
 8000564:	20000020 	.word	0x20000020

08000568 <__libc_init_array>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	4d0d      	ldr	r5, [pc, #52]	@ (80005a0 <__libc_init_array+0x38>)
 800056c:	4c0d      	ldr	r4, [pc, #52]	@ (80005a4 <__libc_init_array+0x3c>)
 800056e:	1b64      	subs	r4, r4, r5
 8000570:	10a4      	asrs	r4, r4, #2
 8000572:	2600      	movs	r6, #0
 8000574:	42a6      	cmp	r6, r4
 8000576:	d109      	bne.n	800058c <__libc_init_array+0x24>
 8000578:	4d0b      	ldr	r5, [pc, #44]	@ (80005a8 <__libc_init_array+0x40>)
 800057a:	4c0c      	ldr	r4, [pc, #48]	@ (80005ac <__libc_init_array+0x44>)
 800057c:	f000 f818 	bl	80005b0 <_init>
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	10a4      	asrs	r4, r4, #2
 8000584:	2600      	movs	r6, #0
 8000586:	42a6      	cmp	r6, r4
 8000588:	d105      	bne.n	8000596 <__libc_init_array+0x2e>
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000590:	4798      	blx	r3
 8000592:	3601      	adds	r6, #1
 8000594:	e7ee      	b.n	8000574 <__libc_init_array+0xc>
 8000596:	f855 3b04 	ldr.w	r3, [r5], #4
 800059a:	4798      	blx	r3
 800059c:	3601      	adds	r6, #1
 800059e:	e7f2      	b.n	8000586 <__libc_init_array+0x1e>
 80005a0:	080005c8 	.word	0x080005c8
 80005a4:	080005c8 	.word	0x080005c8
 80005a8:	080005c8 	.word	0x080005c8
 80005ac:	080005cc 	.word	0x080005cc

080005b0 <_init>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	bf00      	nop
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr

080005bc <_fini>:
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	bf00      	nop
 80005c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c2:	bc08      	pop	{r3}
 80005c4:	469e      	mov	lr, r3
 80005c6:	4770      	bx	lr
