Pinout&Configuration  -> System Core -> RCC -> HSE = Crystaş/Ceramic Resonator
Clock Configuration
	  Input frequency = 8 
	  PLL Source Mux  HSE 
	  System Clock Mux  PLLCLK
	  HCLK(MHz)  168  ->Enter

Pinout&Configuration -> PA0 -> Sol tık -> GPIO_Input olarak ayarla
			PA0 -> SAG tık > user labeli BUTTON olarak degistir	  
			
			PD12 PD13 PD14 PD15 i GPIO_Output olarak ayarla

Pinout&Configuration-> System Core -> GPIO  - Seçilen pinler geliyor
				PA0 tıkla  Configuration geldi. Sırasıyla Degerleri: InputMode , Pulldown
				PD12 Ayarları :	LOW, Output Push Pull , No pull-up no pull down, Very High
				PD13 PD14 PD15 için de aynı ayarlar PD12 ile

SYS var. Seri haberleşmeyi başlatıyor. Biz bir şey yapmasak da otomatik olarak başlıyor USB haberleşmesi
	Debug = Serial Wire dersem USB haberleşmesi için  gerekli olan pinlerimiz ( PA14 VE PA13) Aktif hale gelir

Ctrl + S ile  generate code u okeyle



Biz HAL kütüphanesini Kod tarafında Drivers/STM32F4xx_HAL_Driver içinde bulabilirim.
Ben GPIO tarafıyla ilgilendiğim için isminde hal_gpio içeren dosyalara bakmam gerekli 

   (#) To get the level of a pin configured in input mode use HAL_GPIO_ReadPin().
 /**
  * @brief  Reads the specified input port pin.
  * @param  GPIOx where x can be (A..K) to select the GPIO peripheral for STM32F429X device or
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}







            
    (#) To set/reset the level of a pin configured in output mode use 
        HAL_GPIO_WritePin()/HAL_GPIO_TogglePin().

/**
  * @brief  Sets or clears the selected data port bit.
  *
  * @note   This function uses GPIOx_BSRR register to allow atomic read/modify
  *         accesses. In this way, there is no risk of an IRQ occurring between
  *         the read and the modify access.
  *
  * @param  GPIOx where x can be (A..K) to select the GPIO peripheral for STM32F429X device or
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @param  PinState specifies the value to be written to the selected bit.
  *          This parameter can be one of the GPIO_PinState enum values:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
