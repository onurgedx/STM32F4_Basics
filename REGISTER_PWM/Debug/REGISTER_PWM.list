
REGISTER_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000390  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000518  08000518  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000518  08000518  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000518  08000518  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000518  08000518  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000518  08000518  00001518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800051c  0800051c  0000151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000520  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001608  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000058d  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00003bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000159  00000000  00000000  00003db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e6db  00000000  00000000  00003f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000226c  00000000  00000000  000225ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbc3d  00000000  00000000  00024858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e0495  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005c4  00000000  00000000  000e04d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000e0a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000500 	.word	0x08000500

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000500 	.word	0x08000500

080001c8 <RCC_Config>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void RCC_Config()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00010000; //HSEON enable
 80001cc:	4b27      	ldr	r3, [pc, #156]	@ (800026c <RCC_Config+0xa4>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a26      	ldr	r2, [pc, #152]	@ (800026c <RCC_Config+0xa4>)
 80001d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001d6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x00020000)); //HSEON Ready Flag wait
 80001d8:	bf00      	nop
 80001da:	4b24      	ldr	r3, [pc, #144]	@ (800026c <RCC_Config+0xa4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0f9      	beq.n	80001da <RCC_Config+0x12>
	RCC->CR |= 0x00080000; // CSS Enable
 80001e6:	4b21      	ldr	r3, [pc, #132]	@ (800026c <RCC_Config+0xa4>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a20      	ldr	r2, [pc, #128]	@ (800026c <RCC_Config+0xa4>)
 80001ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001f0:	6013      	str	r3, [r2, #0]
	RCC->CR |= 0x01000000; //PLL ON
 80001f2:	4b1e      	ldr	r3, [pc, #120]	@ (800026c <RCC_Config+0xa4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a1d      	ldr	r2, [pc, #116]	@ (800026c <RCC_Config+0xa4>)
 80001f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001fc:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000;// PLL e HSE
 80001fe:	4b1b      	ldr	r3, [pc, #108]	@ (800026c <RCC_Config+0xa4>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	4a1a      	ldr	r2, [pc, #104]	@ (800026c <RCC_Config+0xa4>)
 8000204:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000208:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004;// PLL M = 4
 800020a:	4b18      	ldr	r3, [pc, #96]	@ (800026c <RCC_Config+0xa4>)
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	4a17      	ldr	r2, [pc, #92]	@ (800026c <RCC_Config+0xa4>)
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00;// PLL N = 168
 8000216:	4b15      	ldr	r3, [pc, #84]	@ (800026c <RCC_Config+0xa4>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4a14      	ldr	r2, [pc, #80]	@ (800026c <RCC_Config+0xa4>)
 800021c:	f443 43b4 	orr.w	r3, r3, #23040	@ 0x5a00
 8000220:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000000;// PLL P = 2
 8000222:	4b12      	ldr	r3, [pc, #72]	@ (800026c <RCC_Config+0xa4>)
 8000224:	4a11      	ldr	r2, [pc, #68]	@ (800026c <RCC_Config+0xa4>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	6053      	str	r3, [r2, #4]
	RCC->CFGR |=0x00000000; //AHB Prescaler = 1
 800022a:	4b10      	ldr	r3, [pc, #64]	@ (800026c <RCC_Config+0xa4>)
 800022c:	4a0f      	ldr	r2, [pc, #60]	@ (800026c <RCC_Config+0xa4>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=0x00080000; //APB2 Prescaler = 2
 8000232:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <RCC_Config+0xa4>)
 8000234:	689b      	ldr	r3, [r3, #8]
 8000236:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <RCC_Config+0xa4>)
 8000238:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800023c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |=0x00001400; //APB1 Prescaler = 4
 800023e:	4b0b      	ldr	r3, [pc, #44]	@ (800026c <RCC_Config+0xa4>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	4a0a      	ldr	r2, [pc, #40]	@ (800026c <RCC_Config+0xa4>)
 8000244:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000248:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00080000; //HSERDY Flag clear
 800024a:	4b08      	ldr	r3, [pc, #32]	@ (800026c <RCC_Config+0xa4>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	4a07      	ldr	r2, [pc, #28]	@ (800026c <RCC_Config+0xa4>)
 8000250:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000254:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000; // CSS Flag clear
 8000256:	4b05      	ldr	r3, [pc, #20]	@ (800026c <RCC_Config+0xa4>)
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	4a04      	ldr	r2, [pc, #16]	@ (800026c <RCC_Config+0xa4>)
 800025c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000260:	60d3      	str	r3, [r2, #12]
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	40023800 	.word	0x40023800

08000270 <GPIO_Config>:

void GPIO_Config()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 1<<3; // AHB1 CLOCK BUS is ACTIVATED for D port
 8000274:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <GPIO_Config+0x38>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000278:	4a0b      	ldr	r2, [pc, #44]	@ (80002a8 <GPIO_Config+0x38>)
 800027a:	f043 0308 	orr.w	r3, r3, #8
 800027e:	6313      	str	r3, [r2, #48]	@ 0x30

	// GPIO D port pins ALTARNATE FUNCTION MODE 01
	GPIOD->MODER |= 2<<24 | 2<<26 | 2<<28 | 2<<30; // Port D ->  12nd,13rd, 14th,15th pins 01 AF
 8000280:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <GPIO_Config+0x3c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a09      	ldr	r2, [pc, #36]	@ (80002ac <GPIO_Config+0x3c>)
 8000286:	f043 432a 	orr.w	r3, r3, #2852126720	@ 0xaa000000
 800028a:	6013      	str	r3, [r2, #0]
	// 8.4.9 GPIO alternate function low register ( GPIOx_AFRL )
	// 8.4.10 GPIO alternate function high register ( GPIOx_AFRH )

	//GPIOD->AFR[0]  LOW
	//GPIOD->AFR[1]  HIGH
	GPIOD->AFR[1] |= 2<<16 | 2<< 20 | 2<<24 | 2<<28; // Port D -> Pin 12 | 13 | 14 | 15 TIM4
 800028c:	4b07      	ldr	r3, [pc, #28]	@ (80002ac <GPIO_Config+0x3c>)
 800028e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000290:	4a06      	ldr	r2, [pc, #24]	@ (80002ac <GPIO_Config+0x3c>)
 8000292:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8000296:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 800029a:	6253      	str	r3, [r2, #36]	@ 0x24


}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020c00 	.word	0x40020c00

080002b0 <TIM_Config>:

void TIM_Config()
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= 1<<2; // tim4 clock enabled
 80002b4:	4b39      	ldr	r3, [pc, #228]	@ (800039c <TIM_Config+0xec>)
 80002b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002b8:	4a38      	ldr	r2, [pc, #224]	@ (800039c <TIM_Config+0xec>)
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6413      	str	r3, [r2, #64]	@ 0x40

	TIM4->CR1 &= ~(1<<4); // DIR Direction 0 = Counter  used as upcounter.  Timer counter mode =  Upcounter
 80002c0:	4b37      	ldr	r3, [pc, #220]	@ (80003a0 <TIM_Config+0xf0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a36      	ldr	r2, [pc, #216]	@ (80003a0 <TIM_Config+0xf0>)
 80002c6:	f023 0310 	bic.w	r3, r3, #16
 80002ca:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~(3<<5); // Bits 6:5 CMS: Center-aligned mode selection
 80002cc:	4b34      	ldr	r3, [pc, #208]	@ (80003a0 <TIM_Config+0xf0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a33      	ldr	r2, [pc, #204]	@ (80003a0 <TIM_Config+0xf0>)
 80002d2:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80002d6:	6013      	str	r3, [r2, #0]
	//sampling clock used by the digital filters (ETR, TIx),
	// 00: tDTS = tCK_INT
	// 01: tDTS = 2 × tCK_INT
	// 10: tDTS = 4 × tCK_INT
	// 11: Reserved
	TIM4->CR1 &= ~(3<<8); //Timer clock div 1
 80002d8:	4b31      	ldr	r3, [pc, #196]	@ (80003a0 <TIM_Config+0xf0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a30      	ldr	r2, [pc, #192]	@ (80003a0 <TIM_Config+0xf0>)
 80002de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80002e2:	6013      	str	r3, [r2, #0]
	 */

	//TIM4->CCMR1 for channel 1 and channel 2
	//TIM4->CCMR2 for channel 3 and channel 4

	TIM4->CCMR1 &= ~(3<<0);//00: CC1 channel is configured as output.
 80002e4:	4b2e      	ldr	r3, [pc, #184]	@ (80003a0 <TIM_Config+0xf0>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a2d      	ldr	r2, [pc, #180]	@ (80003a0 <TIM_Config+0xf0>)
 80002ea:	f023 0303 	bic.w	r3, r3, #3
 80002ee:	6193      	str	r3, [r2, #24]
 Note: In PWM mode 1 or 2, the OCREF level changes only when the result of the
comparison changes or when the output compare mode switches from “frozen” mode
to “PWM” mode.

	 */
	TIM4->CCMR1 |= 6<<4;
 80002f0:	4b2b      	ldr	r3, [pc, #172]	@ (80003a0 <TIM_Config+0xf0>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a2a      	ldr	r2, [pc, #168]	@ (80003a0 <TIM_Config+0xf0>)
 80002f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002fa:	6193      	str	r3, [r2, #24]
 01: CC2 channel is configured as input, IC2 is mapped on TI2
 10: CC2 channel is configured as input, IC2 is mapped on TI1
 11: CC2 channel is configured as input, IC2 is mapped on TRC. This mode is working only if
an internal trigger input is selected through the TS bit (TIMx_SMCR register)
 Note: CC2S bits are writable only when the channel is OFF (CC2E = 0 in TIMx_CCER)*/
	TIM4->CCMR1 &= ~(3<<8);
 80002fc:	4b28      	ldr	r3, [pc, #160]	@ (80003a0 <TIM_Config+0xf0>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a27      	ldr	r2, [pc, #156]	@ (80003a0 <TIM_Config+0xf0>)
 8000302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000306:	6193      	str	r3, [r2, #24]

	// OCM2M[2:0]
	TIM4->CCMR1 |= 6<<12;
 8000308:	4b25      	ldr	r3, [pc, #148]	@ (80003a0 <TIM_Config+0xf0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a24      	ldr	r2, [pc, #144]	@ (80003a0 <TIM_Config+0xf0>)
 800030e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000312:	6193      	str	r3, [r2, #24]
	// Capture/compare 1 & 2 output selected
	// Capture/compare 1 & 2 PWM1 selected

	///////////////////

	TIM4->CCMR2 &= ~(3<<0);//00: CC3 channel 3 is configured as output.
 8000314:	4b22      	ldr	r3, [pc, #136]	@ (80003a0 <TIM_Config+0xf0>)
 8000316:	69db      	ldr	r3, [r3, #28]
 8000318:	4a21      	ldr	r2, [pc, #132]	@ (80003a0 <TIM_Config+0xf0>)
 800031a:	f023 0303 	bic.w	r3, r3, #3
 800031e:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 |= 6<<4; // Channel3 PWM1 selected
 8000320:	4b1f      	ldr	r3, [pc, #124]	@ (80003a0 <TIM_Config+0xf0>)
 8000322:	69db      	ldr	r3, [r3, #28]
 8000324:	4a1e      	ldr	r2, [pc, #120]	@ (80003a0 <TIM_Config+0xf0>)
 8000326:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800032a:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 &= ~(3<<8); //00: CC3 channel 4 is configured as output.
 800032c:	4b1c      	ldr	r3, [pc, #112]	@ (80003a0 <TIM_Config+0xf0>)
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	4a1b      	ldr	r2, [pc, #108]	@ (80003a0 <TIM_Config+0xf0>)
 8000332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000336:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 |= 6<<12;  // Channel 4 PWM1 selected
 8000338:	4b19      	ldr	r3, [pc, #100]	@ (80003a0 <TIM_Config+0xf0>)
 800033a:	69db      	ldr	r3, [r3, #28]
 800033c:	4a18      	ldr	r2, [pc, #96]	@ (80003a0 <TIM_Config+0xf0>)
 800033e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000342:	61d3      	str	r3, [r2, #28]


	// 18.4.9 TIMx capture/compare enable register (TIMx_CCER)
	//POLARITIES AND OUTPUTS

	TIM4->CCER |=  (1<<0 | 1<<4 | 1<<8 | 1<<12); // Capture/Compare 1 & 2 & 3 & 4 output enable
 8000344:	4b16      	ldr	r3, [pc, #88]	@ (80003a0 <TIM_Config+0xf0>)
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	4a15      	ldr	r2, [pc, #84]	@ (80003a0 <TIM_Config+0xf0>)
 800034a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800034e:	f043 0311 	orr.w	r3, r3, #17
 8000352:	6213      	str	r3, [r2, #32]

	TIM4->PSC =400 -1;// PRESCALER
 8000354:	4b12      	ldr	r3, [pc, #72]	@ (80003a0 <TIM_Config+0xf0>)
 8000356:	f240 128f 	movw	r2, #399	@ 0x18f
 800035a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR =10000 -1;// AUTO-RELOAD
 800035c:	4b10      	ldr	r3, [pc, #64]	@ (80003a0 <TIM_Config+0xf0>)
 800035e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000362:	62da      	str	r2, [r3, #44]	@ 0x2c
	//13nd pin's pulse -> TIM4_CCR2
	//14nd pin's pulse -> TIM4_CCR3
	//15nd pin's pulse -> TIM4_CCR4

	//set value between 0 and 100
	TIM4->CCR1 =2000 -1;
 8000364:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <TIM_Config+0xf0>)
 8000366:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800036a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 =4000 -1;
 800036c:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <TIM_Config+0xf0>)
 800036e:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000372:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 =6000 -1;
 8000374:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <TIM_Config+0xf0>)
 8000376:	f241 726f 	movw	r2, #5999	@ 0x176f
 800037a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 =8000 -1;
 800037c:	4b08      	ldr	r3, [pc, #32]	@ (80003a0 <TIM_Config+0xf0>)
 800037e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000382:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM4->CR1 |= 1<<0;
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <TIM_Config+0xf0>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a05      	ldr	r2, [pc, #20]	@ (80003a0 <TIM_Config+0xf0>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6013      	str	r3, [r2, #0]

}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800
 80003a0:	40000800 	.word	0x40000800

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	RCC_Config();
 80003a8:	f7ff ff0e 	bl	80001c8 <RCC_Config>
	GPIO_Config();
 80003ac:	f7ff ff60 	bl	8000270 <GPIO_Config>
	TIM_Config();
 80003b0:	f7ff ff7e 	bl	80002b0 <TIM_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RCC_Config();
 80003b4:	f7ff ff08 	bl	80001c8 <RCC_Config>
 80003b8:	e7fc      	b.n	80003b4 <main+0x10>

080003ba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003be:	bf00      	nop
 80003c0:	e7fd      	b.n	80003be <NMI_Handler+0x4>

080003c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c6:	bf00      	nop
 80003c8:	e7fd      	b.n	80003c6 <HardFault_Handler+0x4>

080003ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ce:	bf00      	nop
 80003d0:	e7fd      	b.n	80003ce <MemManage_Handler+0x4>

080003d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d6:	bf00      	nop
 80003d8:	e7fd      	b.n	80003d6 <BusFault_Handler+0x4>

080003da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003de:	bf00      	nop
 80003e0:	e7fd      	b.n	80003de <UsageFault_Handler+0x4>

080003e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000410:	f000 f83e 	bl	8000490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}

08000418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800041c:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <SystemInit+0x20>)
 800041e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000422:	4a05      	ldr	r2, [pc, #20]	@ (8000438 <SystemInit+0x20>)
 8000424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	e000ed00 	.word	0xe000ed00

0800043c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800043c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000474 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000440:	f7ff ffea 	bl	8000418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000444:	480c      	ldr	r0, [pc, #48]	@ (8000478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000446:	490d      	ldr	r1, [pc, #52]	@ (800047c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000448:	4a0d      	ldr	r2, [pc, #52]	@ (8000480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800044c:	e002      	b.n	8000454 <LoopCopyDataInit>

0800044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000452:	3304      	adds	r3, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000458:	d3f9      	bcc.n	800044e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045a:	4a0a      	ldr	r2, [pc, #40]	@ (8000484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800045c:	4c0a      	ldr	r4, [pc, #40]	@ (8000488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000460:	e001      	b.n	8000466 <LoopFillZerobss>

08000462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000464:	3204      	adds	r2, #4

08000466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000468:	d3fb      	bcc.n	8000462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800046a:	f000 f825 	bl	80004b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800046e:	f7ff ff99 	bl	80003a4 <main>
  bx  lr    
 8000472:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800047c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000480:	08000520 	.word	0x08000520
  ldr r2, =_sbss
 8000484:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000488:	20000024 	.word	0x20000024

0800048c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800048c:	e7fe      	b.n	800048c <ADC_IRQHandler>
	...

08000490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <HAL_IncTick+0x20>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <HAL_IncTick+0x24>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4413      	add	r3, r2
 80004a0:	4a04      	ldr	r2, [pc, #16]	@ (80004b4 <HAL_IncTick+0x24>)
 80004a2:	6013      	str	r3, [r2, #0]
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000020 	.word	0x20000020

080004b8 <__libc_init_array>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	4d0d      	ldr	r5, [pc, #52]	@ (80004f0 <__libc_init_array+0x38>)
 80004bc:	4c0d      	ldr	r4, [pc, #52]	@ (80004f4 <__libc_init_array+0x3c>)
 80004be:	1b64      	subs	r4, r4, r5
 80004c0:	10a4      	asrs	r4, r4, #2
 80004c2:	2600      	movs	r6, #0
 80004c4:	42a6      	cmp	r6, r4
 80004c6:	d109      	bne.n	80004dc <__libc_init_array+0x24>
 80004c8:	4d0b      	ldr	r5, [pc, #44]	@ (80004f8 <__libc_init_array+0x40>)
 80004ca:	4c0c      	ldr	r4, [pc, #48]	@ (80004fc <__libc_init_array+0x44>)
 80004cc:	f000 f818 	bl	8000500 <_init>
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	10a4      	asrs	r4, r4, #2
 80004d4:	2600      	movs	r6, #0
 80004d6:	42a6      	cmp	r6, r4
 80004d8:	d105      	bne.n	80004e6 <__libc_init_array+0x2e>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e0:	4798      	blx	r3
 80004e2:	3601      	adds	r6, #1
 80004e4:	e7ee      	b.n	80004c4 <__libc_init_array+0xc>
 80004e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ea:	4798      	blx	r3
 80004ec:	3601      	adds	r6, #1
 80004ee:	e7f2      	b.n	80004d6 <__libc_init_array+0x1e>
 80004f0:	08000518 	.word	0x08000518
 80004f4:	08000518 	.word	0x08000518
 80004f8:	08000518 	.word	0x08000518
 80004fc:	0800051c 	.word	0x0800051c

08000500 <_init>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr

0800050c <_fini>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr
