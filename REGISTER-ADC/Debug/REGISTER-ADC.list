
REGISTER-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000528  08000528  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000528  08000528  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000528  08000528  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000528  08000528  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000528  08000528  00001528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800052c  0800052c  0000152c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000530  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001692  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005ba  00000000  00000000  000036c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00003c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000015e  00000000  00000000  00003e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e6db  00000000  00000000  00003fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000228c  00000000  00000000  000226a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbc99  00000000  00000000  00024935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e05ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005ec  00000000  00000000  000e0614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000e0c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000510 	.word	0x08000510

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000510 	.word	0x08000510

080001c8 <Read_ADC>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


uint8_t Read_ADC()
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	uint8_t value;
	ADC1->CR2 |= 0x40000000; //SWSTART
 80001ce:	4b0b      	ldr	r3, [pc, #44]	@ (80001fc <Read_ADC+0x34>)
 80001d0:	689b      	ldr	r3, [r3, #8]
 80001d2:	4a0a      	ldr	r2, [pc, #40]	@ (80001fc <Read_ADC+0x34>)
 80001d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80001d8:	6093      	str	r3, [r2, #8]

	// ADC_SR ADC Status Register
	while(!(ADC1->SR & 0x00000002)); // WAIT FOR ADC1 SR  EOC FLAG
 80001da:	bf00      	nop
 80001dc:	4b07      	ldr	r3, [pc, #28]	@ (80001fc <Read_ADC+0x34>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f003 0302 	and.w	r3, r3, #2
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f9      	beq.n	80001dc <Read_ADC+0x14>

	value = ADC1->DR; // ADC1-DR  ADC Data Register
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <Read_ADC+0x34>)
 80001ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ec:	71fb      	strb	r3, [r7, #7]
	return value;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	40012000 	.word	0x40012000

08000200 <RCC_Config>:

void RCC_Config()
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00030000; // HSEON and HSEONRDY enable
 8000204:	4b25      	ldr	r3, [pc, #148]	@ (800029c <RCC_Config+0x9c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a24      	ldr	r2, [pc, #144]	@ (800029c <RCC_Config+0x9c>)
 800020a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800020e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR &0x00020000)); // HSEON  Ready Flag wait
 8000210:	bf00      	nop
 8000212:	4b22      	ldr	r3, [pc, #136]	@ (800029c <RCC_Config+0x9c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f9      	beq.n	8000212 <RCC_Config+0x12>
	RCC->CR |= 0x00080000; // CSS Enable
 800021e:	4b1f      	ldr	r3, [pc, #124]	@ (800029c <RCC_Config+0x9c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a1e      	ldr	r2, [pc, #120]	@ (800029c <RCC_Config+0x9c>)
 8000224:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000228:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000; // PLL => HSE
 800022a:	4b1c      	ldr	r3, [pc, #112]	@ (800029c <RCC_Config+0x9c>)
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	4a1b      	ldr	r2, [pc, #108]	@ (800029c <RCC_Config+0x9c>)
 8000230:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000234:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004; // PLL M =4;
 8000236:	4b19      	ldr	r3, [pc, #100]	@ (800029c <RCC_Config+0x9c>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a18      	ldr	r2, [pc, #96]	@ (800029c <RCC_Config+0x9c>)
 800023c:	f043 0304 	orr.w	r3, r3, #4
 8000240:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00; // PLL N =168;
 8000242:	4b16      	ldr	r3, [pc, #88]	@ (800029c <RCC_Config+0x9c>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	4a15      	ldr	r2, [pc, #84]	@ (800029c <RCC_Config+0x9c>)
 8000248:	f443 43b4 	orr.w	r3, r3, #23040	@ 0x5a00
 800024c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004; // PLL P =2;
 800024e:	4b13      	ldr	r3, [pc, #76]	@ (800029c <RCC_Config+0x9c>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	4a12      	ldr	r2, [pc, #72]	@ (800029c <RCC_Config+0x9c>)
 8000254:	f043 0304 	orr.w	r3, r3, #4
 8000258:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x00000000; // AHB Prescaler = 1;
 800025a:	4b10      	ldr	r3, [pc, #64]	@ (800029c <RCC_Config+0x9c>)
 800025c:	4a0f      	ldr	r2, [pc, #60]	@ (800029c <RCC_Config+0x9c>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00080000; // APB2 Prescaler = 2;
 8000262:	4b0e      	ldr	r3, [pc, #56]	@ (800029c <RCC_Config+0x9c>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	4a0d      	ldr	r2, [pc, #52]	@ (800029c <RCC_Config+0x9c>)
 8000268:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800026c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00001400; // APB1 Prescaler = 4
 800026e:	4b0b      	ldr	r3, [pc, #44]	@ (800029c <RCC_Config+0x9c>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <RCC_Config+0x9c>)
 8000274:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000278:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x0008000;  //HSERDY Flag clear;
 800027a:	4b08      	ldr	r3, [pc, #32]	@ (800029c <RCC_Config+0x9c>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	@ (800029c <RCC_Config+0x9c>)
 8000280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000284:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000;  //CSS flag clear;
 8000286:	4b05      	ldr	r3, [pc, #20]	@ (800029c <RCC_Config+0x9c>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	4a04      	ldr	r2, [pc, #16]	@ (800029c <RCC_Config+0x9c>)
 800028c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000290:	60d3      	str	r3, [r2, #12]
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	40023800 	.word	0x40023800

080002a0 <GPIO_Config>:

void GPIO_Config()
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR = 0x00000008; //  GPIOD are ACTIVATED
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <GPIO_Config+0x50>)
 80002a6:	2208      	movs	r2, #8
 80002a8:	631a      	str	r2, [r3, #48]	@ 0x30
	GPIOD->MODER = 0x55000000; // GPIOD pin12..15 output
 80002aa:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <GPIO_Config+0x54>)
 80002ac:	f04f 42aa 	mov.w	r2, #1426063360	@ 0x55000000
 80002b0:	601a      	str	r2, [r3, #0]
	GPIOD->OTYPER = 0x00000000;
 80002b2:	4b10      	ldr	r3, [pc, #64]	@ (80002f4 <GPIO_Config+0x54>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	605a      	str	r2, [r3, #4]
	GPIOD->OSPEEDR = 0xFF000000; //
 80002b8:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <GPIO_Config+0x54>)
 80002ba:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80002be:	609a      	str	r2, [r3, #8]
	GPIOD->PUPDR = 0x00000000;
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <GPIO_Config+0x54>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]

	RCC->AHB1ENR |= 0x00000001; // GPIOA is ACTIVATED
 80002c6:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <GPIO_Config+0x50>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ca:	4a09      	ldr	r2, [pc, #36]	@ (80002f0 <GPIO_Config+0x50>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= 0x00000003; // MODER0 -> ANALOG MOD 11
 80002d2:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <GPIO_Config+0x58>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a08      	ldr	r2, [pc, #32]	@ (80002f8 <GPIO_Config+0x58>)
 80002d8:	f043 0303 	orr.w	r3, r3, #3
 80002dc:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR = 0x00000003; // moder0 100MHz
 80002de:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <GPIO_Config+0x58>)
 80002e0:	2203      	movs	r2, #3
 80002e2:	609a      	str	r2, [r3, #8]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020c00 	.word	0x40020c00
 80002f8:	40020000 	.word	0x40020000

080002fc <ADC_Config>:

void ADC_Config()
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 0x00000100; //ADC1 clock is enabled
 8000300:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <ADC_Config+0x4c>)
 8000302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000304:	4a10      	ldr	r2, [pc, #64]	@ (8000348 <ADC_Config+0x4c>)
 8000306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800030a:	6453      	str	r3, [r2, #68]	@ 0x44
	ADC1->CR1 |= 0x02000000; // Resolution 8bit
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <ADC_Config+0x50>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a0e      	ldr	r2, [pc, #56]	@ (800034c <ADC_Config+0x50>)
 8000312:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000316:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= 0x00000001; // ADC is enable
 8000318:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <ADC_Config+0x50>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a0b      	ldr	r2, [pc, #44]	@ (800034c <ADC_Config+0x50>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2 |= 0x00000003; // 56 Cycles
 8000324:	4b09      	ldr	r3, [pc, #36]	@ (800034c <ADC_Config+0x50>)
 8000326:	691b      	ldr	r3, [r3, #16]
 8000328:	4a08      	ldr	r2, [pc, #32]	@ (800034c <ADC_Config+0x50>)
 800032a:	f043 0303 	orr.w	r3, r3, #3
 800032e:	6113      	str	r3, [r2, #16]
	ADC->CCR |= 0x00010000;
 8000330:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <ADC_Config+0x54>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4a06      	ldr	r2, [pc, #24]	@ (8000350 <ADC_Config+0x54>)
 8000336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800033a:	6053      	str	r3, [r2, #4]

}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40023800 	.word	0x40023800
 800034c:	40012000 	.word	0x40012000
 8000350:	40012300 	.word	0x40012300

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	RCC_Config();
 8000358:	f7ff ff52 	bl	8000200 <RCC_Config>
	GPIO_Config();
 800035c:	f7ff ffa0 	bl	80002a0 <GPIO_Config>
	ADC_Config();
 8000360:	f7ff ffcc 	bl	80002fc <ADC_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  adc_value = Read_ADC();
 8000364:	f7ff ff30 	bl	80001c8 <Read_ADC>
 8000368:	4603      	mov	r3, r0
 800036a:	461a      	mov	r2, r3
 800036c:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <main+0x6c>)
 800036e:	701a      	strb	r2, [r3, #0]
	  if(adc_value>204 )
 8000370:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <main+0x6c>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2bcc      	cmp	r3, #204	@ 0xcc
 8000376:	d904      	bls.n	8000382 <main+0x2e>
	  {
		  GPIOD->ODR = 0x0000F000;
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <main+0x70>)
 800037a:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 800037e:	615a      	str	r2, [r3, #20]
 8000380:	e7f0      	b.n	8000364 <main+0x10>
	  }
	  else if(adc_value>153 )
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <main+0x6c>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b99      	cmp	r3, #153	@ 0x99
 8000388:	d904      	bls.n	8000394 <main+0x40>
	  {
	  	  GPIOD->ODR = 0x00007000;
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <main+0x70>)
 800038c:	f44f 42e0 	mov.w	r2, #28672	@ 0x7000
 8000390:	615a      	str	r2, [r3, #20]
 8000392:	e7e7      	b.n	8000364 <main+0x10>
	  }
	  else if(adc_value>102)
 8000394:	4b0a      	ldr	r3, [pc, #40]	@ (80003c0 <main+0x6c>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b66      	cmp	r3, #102	@ 0x66
 800039a:	d904      	bls.n	80003a6 <main+0x52>
	  {
	  	  GPIOD->ODR = 0x00003000;
 800039c:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <main+0x70>)
 800039e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80003a2:	615a      	str	r2, [r3, #20]
 80003a4:	e7de      	b.n	8000364 <main+0x10>
	  }
	  else if(adc_value>51 )
 80003a6:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <main+0x6c>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b33      	cmp	r3, #51	@ 0x33
 80003ac:	d904      	bls.n	80003b8 <main+0x64>
	  {
	  	  GPIOD->ODR = 0x00001000;
 80003ae:	4b05      	ldr	r3, [pc, #20]	@ (80003c4 <main+0x70>)
 80003b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003b4:	615a      	str	r2, [r3, #20]
 80003b6:	e7d5      	b.n	8000364 <main+0x10>
	  }
	  else
	  {
	  	  GPIOD->ODR = 0x00000000;
 80003b8:	4b02      	ldr	r3, [pc, #8]	@ (80003c4 <main+0x70>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	615a      	str	r2, [r3, #20]
	  adc_value = Read_ADC();
 80003be:	e7d1      	b.n	8000364 <main+0x10>
 80003c0:	20000020 	.word	0x20000020
 80003c4:	40020c00 	.word	0x40020c00

080003c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <NMI_Handler+0x4>

080003d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <MemManage_Handler+0x4>

080003e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <BusFault_Handler+0x4>

080003e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <UsageFault_Handler+0x4>

080003f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800041e:	f000 f83f 	bl	80004a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <SystemInit+0x20>)
 800042e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000432:	4a05      	ldr	r2, [pc, #20]	@ (8000448 <SystemInit+0x20>)
 8000434:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000438:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800044c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000484 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000450:	f7ff ffea 	bl	8000428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000454:	480c      	ldr	r0, [pc, #48]	@ (8000488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000456:	490d      	ldr	r1, [pc, #52]	@ (800048c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000458:	4a0d      	ldr	r2, [pc, #52]	@ (8000490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800046c:	4c0a      	ldr	r4, [pc, #40]	@ (8000498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800047a:	f000 f825 	bl	80004c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800047e:	f7ff ff69 	bl	8000354 <main>
  bx  lr    
 8000482:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000490:	08000530 	.word	0x08000530
  ldr r2, =_sbss
 8000494:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000498:	20000028 	.word	0x20000028

0800049c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC_IRQHandler>
	...

080004a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004a4:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <HAL_IncTick+0x20>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <HAL_IncTick+0x24>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4413      	add	r3, r2
 80004b0:	4a04      	ldr	r2, [pc, #16]	@ (80004c4 <HAL_IncTick+0x24>)
 80004b2:	6013      	str	r3, [r2, #0]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000000 	.word	0x20000000
 80004c4:	20000024 	.word	0x20000024

080004c8 <__libc_init_array>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000500 <__libc_init_array+0x38>)
 80004cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000504 <__libc_init_array+0x3c>)
 80004ce:	1b64      	subs	r4, r4, r5
 80004d0:	10a4      	asrs	r4, r4, #2
 80004d2:	2600      	movs	r6, #0
 80004d4:	42a6      	cmp	r6, r4
 80004d6:	d109      	bne.n	80004ec <__libc_init_array+0x24>
 80004d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000508 <__libc_init_array+0x40>)
 80004da:	4c0c      	ldr	r4, [pc, #48]	@ (800050c <__libc_init_array+0x44>)
 80004dc:	f000 f818 	bl	8000510 <_init>
 80004e0:	1b64      	subs	r4, r4, r5
 80004e2:	10a4      	asrs	r4, r4, #2
 80004e4:	2600      	movs	r6, #0
 80004e6:	42a6      	cmp	r6, r4
 80004e8:	d105      	bne.n	80004f6 <__libc_init_array+0x2e>
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f0:	4798      	blx	r3
 80004f2:	3601      	adds	r6, #1
 80004f4:	e7ee      	b.n	80004d4 <__libc_init_array+0xc>
 80004f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fa:	4798      	blx	r3
 80004fc:	3601      	adds	r6, #1
 80004fe:	e7f2      	b.n	80004e6 <__libc_init_array+0x1e>
 8000500:	08000528 	.word	0x08000528
 8000504:	08000528 	.word	0x08000528
 8000508:	08000528 	.word	0x08000528
 800050c:	0800052c 	.word	0x0800052c

08000510 <_init>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr

0800051c <_fini>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr
