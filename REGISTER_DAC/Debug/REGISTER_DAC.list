
REGISTER_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000474  08000474  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000474  08000474  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000474  08000474  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000474  08000474  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000474  08000474  00001474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000478  08000478  00001478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800047c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000155a  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005c5  00000000  00000000  0000358e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00003b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000158  00000000  00000000  00003d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e6db  00000000  00000000  00003e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002215  00000000  00000000  00022573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbc6f  00000000  00000000  00024788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e03f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005d0  00000000  00000000  000e043c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000e0a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800045c 	.word	0x0800045c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800045c 	.word	0x0800045c

080001c8 <RCC_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void RCC_Config()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00010000; // HSEON and HSEONRDY enable
 80001cc:	4b25      	ldr	r3, [pc, #148]	@ (8000264 <RCC_Config+0x9c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a24      	ldr	r2, [pc, #144]	@ (8000264 <RCC_Config+0x9c>)
 80001d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001d6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR &0x00020000)); // HSEON  Ready Flag wait
 80001d8:	bf00      	nop
 80001da:	4b22      	ldr	r3, [pc, #136]	@ (8000264 <RCC_Config+0x9c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0f9      	beq.n	80001da <RCC_Config+0x12>
	RCC->CR |= 0x00080000; // CSS Enable
 80001e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000264 <RCC_Config+0x9c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000264 <RCC_Config+0x9c>)
 80001ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001f0:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000; // PLL => HSE
 80001f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000264 <RCC_Config+0x9c>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000264 <RCC_Config+0x9c>)
 80001f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80001fc:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004; // PLL M =4;
 80001fe:	4b19      	ldr	r3, [pc, #100]	@ (8000264 <RCC_Config+0x9c>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	4a18      	ldr	r2, [pc, #96]	@ (8000264 <RCC_Config+0x9c>)
 8000204:	f043 0304 	orr.w	r3, r3, #4
 8000208:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00; // PLL N =168;
 800020a:	4b16      	ldr	r3, [pc, #88]	@ (8000264 <RCC_Config+0x9c>)
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	4a15      	ldr	r2, [pc, #84]	@ (8000264 <RCC_Config+0x9c>)
 8000210:	f443 43b4 	orr.w	r3, r3, #23040	@ 0x5a00
 8000214:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004; // PLL P =2;
 8000216:	4b13      	ldr	r3, [pc, #76]	@ (8000264 <RCC_Config+0x9c>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4a12      	ldr	r2, [pc, #72]	@ (8000264 <RCC_Config+0x9c>)
 800021c:	f043 0304 	orr.w	r3, r3, #4
 8000220:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x00000000; // AHB Prescaler = 1;
 8000222:	4b10      	ldr	r3, [pc, #64]	@ (8000264 <RCC_Config+0x9c>)
 8000224:	4a0f      	ldr	r2, [pc, #60]	@ (8000264 <RCC_Config+0x9c>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00080000; // APB2 Prescaler = 2;
 800022a:	4b0e      	ldr	r3, [pc, #56]	@ (8000264 <RCC_Config+0x9c>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	4a0d      	ldr	r2, [pc, #52]	@ (8000264 <RCC_Config+0x9c>)
 8000230:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000234:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00001400; // APB1 Prescaler = 4
 8000236:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <RCC_Config+0x9c>)
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <RCC_Config+0x9c>)
 800023c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000240:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x0008000;  //HSERDY Flag clear;
 8000242:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <RCC_Config+0x9c>)
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	4a07      	ldr	r2, [pc, #28]	@ (8000264 <RCC_Config+0x9c>)
 8000248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800024c:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000;  //CSS flag clear;
 800024e:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <RCC_Config+0x9c>)
 8000250:	68db      	ldr	r3, [r3, #12]
 8000252:	4a04      	ldr	r2, [pc, #16]	@ (8000264 <RCC_Config+0x9c>)
 8000254:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000258:	60d3      	str	r3, [r2, #12]

}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	40023800 	.word	0x40023800

08000268 <DAC1_Config>:

void DAC1_Config()
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	// will activate DAC so RCC_APB1 periperhal clock enable register
	RCC->APB1ENR |= 0x20000000; //  DAC interface clock enable
 800026c:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <DAC1_Config+0x44>)
 800026e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000270:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <DAC1_Config+0x44>)
 8000272:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000276:	6413      	str	r3, [r2, #64]	@ 0x40

	// GO DAC_CR

	//Bit 0 == 1 -> DAC channel 1 enabled
	DAC->CR |= 0x00000001;
 8000278:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <DAC1_Config+0x48>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0c      	ldr	r2, [pc, #48]	@ (80002b0 <DAC1_Config+0x48>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6013      	str	r3, [r2, #0]

	// GO DAC_SWTRIGR
	// not in use so we make it disable
	DAC->SWTRIGR &= 0xFFFFFFFC;
 8000284:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <DAC1_Config+0x48>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a09      	ldr	r2, [pc, #36]	@ (80002b0 <DAC1_Config+0x48>)
 800028a:	f023 0303 	bic.w	r3, r3, #3
 800028e:	6053      	str	r3, [r2, #4]

	DAC->DHR12R1 &= 0xFFFFF000; // we set first data of DAC
 8000290:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <DAC1_Config+0x48>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	@ (80002b0 <DAC1_Config+0x48>)
 8000296:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800029a:	f023 030f 	bic.w	r3, r3, #15
 800029e:	6093      	str	r3, [r2, #8]
								// we made it 0
	// A port 4th pin is DAC channel


}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40007400 	.word	0x40007400

080002b4 <delay>:
void delay(int timeout)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	while(timeout--);
 80002bc:	bf00      	nop
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	1e5a      	subs	r2, r3, #1
 80002c2:	607a      	str	r2, [r7, #4]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1fa      	bne.n	80002be <delay+0xa>
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
	...

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
	RCC_Config();
 80002de:	f7ff ff73 	bl	80001c8 <RCC_Config>
	DAC1_Config();
 80002e2:	f7ff ffc1 	bl	8000268 <DAC1_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i=0;i<4096;i++)
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	e009      	b.n	8000300 <main+0x28>
	  {
		  DAC->DHR12R1 =4095; // set voltage via bitwise
 80002ec:	4b07      	ldr	r3, [pc, #28]	@ (800030c <main+0x34>)
 80002ee:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80002f2:	609a      	str	r2, [r3, #8]
		  delay(168000);
 80002f4:	4806      	ldr	r0, [pc, #24]	@ (8000310 <main+0x38>)
 80002f6:	f7ff ffdd 	bl	80002b4 <delay>
	  for(int i=0;i<4096;i++)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	3301      	adds	r3, #1
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000306:	dbf1      	blt.n	80002ec <main+0x14>
 8000308:	e7ed      	b.n	80002e6 <main+0xe>
 800030a:	bf00      	nop
 800030c:	40007400 	.word	0x40007400
 8000310:	00029040 	.word	0x00029040

08000314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <NMI_Handler+0x4>

0800031c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <HardFault_Handler+0x4>

08000324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <MemManage_Handler+0x4>

0800032c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <BusFault_Handler+0x4>

08000334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <UsageFault_Handler+0x4>

0800033c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800036a:	f000 f83f 	bl	80003ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <SystemInit+0x20>)
 800037a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800037e:	4a05      	ldr	r2, [pc, #20]	@ (8000394 <SystemInit+0x20>)
 8000380:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000384:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800039c:	f7ff ffea 	bl	8000374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	@ (80003d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	@ (80003d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	@ (80003dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	@ (80003e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003c6:	f000 f825 	bl	8000414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ca:	f7ff ff85 	bl	80002d8 <main>
  bx  lr    
 80003ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80003d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003dc:	0800047c 	.word	0x0800047c
  ldr r2, =_sbss
 80003e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003e4:	20000024 	.word	0x20000024

080003e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC_IRQHandler>
	...

080003ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <HAL_IncTick+0x20>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <HAL_IncTick+0x24>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4413      	add	r3, r2
 80003fc:	4a04      	ldr	r2, [pc, #16]	@ (8000410 <HAL_IncTick+0x24>)
 80003fe:	6013      	str	r3, [r2, #0]
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000000 	.word	0x20000000
 8000410:	20000020 	.word	0x20000020

08000414 <__libc_init_array>:
 8000414:	b570      	push	{r4, r5, r6, lr}
 8000416:	4d0d      	ldr	r5, [pc, #52]	@ (800044c <__libc_init_array+0x38>)
 8000418:	4c0d      	ldr	r4, [pc, #52]	@ (8000450 <__libc_init_array+0x3c>)
 800041a:	1b64      	subs	r4, r4, r5
 800041c:	10a4      	asrs	r4, r4, #2
 800041e:	2600      	movs	r6, #0
 8000420:	42a6      	cmp	r6, r4
 8000422:	d109      	bne.n	8000438 <__libc_init_array+0x24>
 8000424:	4d0b      	ldr	r5, [pc, #44]	@ (8000454 <__libc_init_array+0x40>)
 8000426:	4c0c      	ldr	r4, [pc, #48]	@ (8000458 <__libc_init_array+0x44>)
 8000428:	f000 f818 	bl	800045c <_init>
 800042c:	1b64      	subs	r4, r4, r5
 800042e:	10a4      	asrs	r4, r4, #2
 8000430:	2600      	movs	r6, #0
 8000432:	42a6      	cmp	r6, r4
 8000434:	d105      	bne.n	8000442 <__libc_init_array+0x2e>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	f855 3b04 	ldr.w	r3, [r5], #4
 800043c:	4798      	blx	r3
 800043e:	3601      	adds	r6, #1
 8000440:	e7ee      	b.n	8000420 <__libc_init_array+0xc>
 8000442:	f855 3b04 	ldr.w	r3, [r5], #4
 8000446:	4798      	blx	r3
 8000448:	3601      	adds	r6, #1
 800044a:	e7f2      	b.n	8000432 <__libc_init_array+0x1e>
 800044c:	08000474 	.word	0x08000474
 8000450:	08000474 	.word	0x08000474
 8000454:	08000474 	.word	0x08000474
 8000458:	08000478 	.word	0x08000478

0800045c <_init>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr

08000468 <_fini>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr
